/* 
    Meu primeiro trabalho na graduação em Computação na Universidade Federal do Paraná 
    Jogo da Velha em Linguagem C
    Versão: V1.0.0.0
    Autor: Julio Cezar da Silva Ferreira
    Licença: Attribution 4.0 International (CC BY 4.0)
*/

#include <stdio.h>
#define DIM 3
int vez;

/* Funções */
int menu(void);
void limpar(void);
void zerarTabuleiro(int tabuleiro[][DIM]);
void exibirTabuleiro(int tabuleiro[][DIM]);
void jogar(int tabuleiro[][DIM]);
int checarLocal(int tabuleiro[][DIM], int linha, int coluna);
int checarLinha(int tabuleiro[][DIM]);
int checarColuna(int tabuleiro[][DIM]);
int checarDiagonal(int tabuleiro[][DIM]);
int checarEmpate(int tabuleiro[][DIM]);
int checarTermino(int tabuleiro[][DIM], int vez);
void jogada(int tabuleiro[][DIM]);

int main(void)
{
    int tabuleiro[DIM][DIM],
        continuar;
    do
    {
        vez = 1;
        continuar = menu();
        if (continuar == 1)
            jogar(tabuleiro);
    } while (continuar);

    return 0;
}

int menu(void)
{
    int opcao;

    printf("\t\t JOGO DA VELHA \n");
    printf("\n1.Jogar\n");
    printf("0.Sair\n");
    printf("\nOpcao: ");

    scanf("%d", &opcao);

    switch (opcao)
    {
    case 1:
    case 0:
        break;
    default:
        limpar();
        printf("Opcao invalida. Tente de novo!\n");
    }

    return opcao;
}

void limpar(void)
{
    int count = 0;

    while (count != 100)
    {
        putchar('\n');
        count++;
    }
}

void zerarTabuleiro(int tabuleiro[][DIM])
{
    int linha, coluna;
    for (linha = 0; linha < DIM; linha++)
        for (coluna = 0; coluna < DIM; coluna++)
            tabuleiro[linha][coluna] = 0;
}

void exibirTabuleiro(int tabuleiro[][DIM])
{
    int linha, coluna;
    putchar('\n');

    for (linha = 0; linha < DIM; linha++)
        / para
        {
            for (coluna = 0; coluna < DIM; coluna++)
            {
                if (tabuleiro[linha][coluna] == 0)
                    printf("    ");
                else if (tabuleiro[linha][coluna] == 1)
                    printf("  X ");
                else
                    printf("  O ");

                if (coluna != (DIM - 1))
                    printf("|");
            }
            putchar('\n');
        }
    putchar('\n');
}

void jogar(int tabuleiro[][DIM])
{
    int continua;
    zerarTabuleiro(tabuleiro);

    do
    {
        limpar();
        exibirTabuleiro(tabuleiro);
        jogada(tabuleiro);

    } while (checarTermino(tabuleiro, vez) != 1);
}

int checarLocal(int tabuleiro[][DIM], int linha, int coluna)
{
    if (linha < 0 || linha > (DIM - 1) || coluna < 0 || coluna > (DIM - 1) || tabuleiro[linha][coluna] != 0)
        return 0;
    else
        return 1;
}

int checarLinha(int tabuleiro[][DIM])
{
    int linha, coluna,
        soma;

    for (linha = 0; linha < DIM; linha++)
    {
        soma = 0;

        for (coluna = 0; coluna < DIM; coluna++)
            soma += tabuleiro[linha][coluna];

        if (soma == DIM || soma == (-1) * DIM)
            return 1;
    }

    return 0;
}

int checarColuna(int tabuleiro[][DIM])
{
    int linha, coluna,
        soma;

    for (coluna = 0; coluna < DIM; coluna++)
    {
        soma = 0;

        for (linha = 0; linha < DIM; linha++)
            soma += tabuleiro[linha][coluna];

        if (soma == DIM || soma == (-1) * DIM)
            return 1;
    }

    return 0;
}

int checarDiagonal(int tabuleiro[][DIM])
{
    int linha,
        diagonal_principal = 0,
        diagonal_secundaria = 0;

    for (linha = 0; linha < DIM; linha++)
    {
        diagonal_principal += tabuleiro[linha][linha];
        diagonal_secundaria += tabuleiro[linha][DIM - linha - 1];
    }

    if (diagonal_principal == DIM || diagonal_principal == (-1) * DIM ||
        diagonal_secundaria == DIM || diagonal_secundaria == (-1) * DIM)
        return 1;

    return 0;
}

int checarEmpate(int tabuleiro[][DIM])
{
    int linha, coluna;

    for (linha = 0; linha < DIM; linha++)
        for (coluna = 0; coluna < DIM; coluna++)
            if (tabuleiro[linha][coluna] == 0)
                return 0;

    return 1;
}

int checarTermino(int tabuleiro[][DIM], int vez)
{
    if (checarLinha(tabuleiro))
    {
        printf("Jogo encerrado. Jogador %d venceu !\n\n", (vez % 2) + 1);
        exibirTabuleiro(tabuleiro);
        return 1;
    }

    if (checarColuna(tabuleiro))
    {
        printf("Jogo encerrado. Jogador %d venceu !\n\n", (vez % 2) + 1);
        exibirTabuleiro(tabuleiro);
        return 1;
    }

    if (checarDiagonal(tabuleiro))
    {
        printf("Jogo encerrado. Jogador %d venceu !\n\n", (vez % 2) + 1);
        exibirTabuleiro(tabuleiro);
        return 1;
    }

    if (checarEmpate(tabuleiro))
    {
        printf("Jogo encerrado. Ocorreu um empate! !\n\n");
        exibirTabuleiro(tabuleiro);
        return 1;
    }

    return 0;
}

void jogada(int tabuleiro[][DIM])
{
    int linha, coluna;
    vez++;
    printf("\n--> Jogador %d \n", (vez % 2) + 1);

    do
    {
        printf("Linha: ");
        scanf("%d", &linha);
        linha--;

        printf("Coluna: ");
        scanf("%d", &coluna);
        coluna--;

        if (checarLocal(tabuleiro, linha, coluna) == 0)
            printf("Posicao ocupada ou inexistente, escolha outra.\n");

    } while (checarLocal(tabuleiro, linha, coluna) == 0);

    if (vez % 2)
        tabuleiro[linha][coluna] = -1;
    else
        tabuleiro[linha][coluna] = 1;
}
